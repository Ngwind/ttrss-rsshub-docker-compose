version: "3"
services:
  service.rss:
    image: wangqiru/ttrss:latest
    ports:
      - 10081:80
    environment:
      - SELF_URL_PATH=http://127.0.0.1:10081/ # please change to your own domain
      - DB_PASS=Rss@2021 # use the same password defined in `database.postgres`
      - PUID=1000
      - PGID=1000
      #- ALLOW_PORTS=1200,3000
    volumes:
      - feed-icons:/var/www/feed-icons/
    networks:
      - public_access
      - service_only
      - database_only
    stdin_open: true
    tty: true
    restart: always

  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    networks:
      - public_access
      - service_only
    restart: always

  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page
    image: wangqiru/opencc-api-server:latest
    environment:
      - NODE_ENV=production
    networks:
      - service_only
    restart: always

  database.postgres:
    image: postgres:13-alpine
    environment:
      - POSTGRES_PASSWORD=Rss@2021 # feel free to change the password
    volumes:
      - pgsql-data:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host
    networks:
      - database_only
    restart: always

  # utility.watchtower:
  #   container_name: watchtower
  #   image: containrrr/watchtower:latest
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=86400
  #   restart: always

  service.rsshub:
    image: diygod/rsshub
    restart: always
    ports:
      - "10082:80"
    environment:
      PORT: 80
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: "redis://service.redis:6379/"
      PUPPETEER_WS_ENDPOINT: "ws://service.browserless:3000"
    networks:
      - service_only
      - public_access
    depends_on:
      - service.redis
      - service.browserless

  service.browserless:
    # See issue 6680
    image: browserless/chrome:1.43-chrome-stable
    restart: always
    networks:
      - service_only

  service.redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - service_only

volumes:
  redis-data:
  pgsql-data:
  feed-icons:

networks:
  public_access: # Provide the access for ttrss UI
  service_only: # Provide the communication network between services only
    internal: true
  database_only: # Provide the communication between ttrss and database only
    internal: true
